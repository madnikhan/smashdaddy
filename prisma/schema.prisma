// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts      Account[]
  sessions      Session[]

  // Role-based relationships
  customer      Customer?   @relation("UserCustomer")
  driver        Driver?     @relation("UserDriver")
  restaurant    Restaurant? @relation("UserRestaurant")
  admin         Admin?      @relation("UserAdmin")
  till          Till?       @relation("UserTill")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Role-specific Models
model Customer {
  id            String   @id @default(cuid())
  userId        String   @unique
  phone         String?
  addresses     Address[]
  loyaltyPoints Int      @default(0)
  totalSpent    Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation("UserCustomer", fields: [userId], references: [id], onDelete: Cascade)
  reviews       Review[]
  supportTickets SupportTicket[]
  cart          Cart?    @relation("CustomerCart")
  orders        Order[]

  @@map("customers")
}

model Driver {
  id            String   @id @default(cuid())
  userId        String   @unique
  phone         String
  password      String?  // Hashed password for driver login
  vehicleInfo   Json?
  isAvailable   Boolean  @default(false)
  currentLocation Json?
  rating        Float    @default(0)
  totalDeliveries Int    @default(0)
  earnings      Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation("UserDriver", fields: [userId], references: [id], onDelete: Cascade)
  deliveries    Order[]  @relation("DriverDeliveries")

  @@map("drivers")
}

model Restaurant {
  id            String   @id @default(cuid())
  userId        String   @unique
  name          String   @default("STACK'D")
  description   String?  @default("Smashed burgers, grilled chicken, wings & more in Daventry")
  logo          String?
  banner        String?
  phone         String
  email         String
  address       String
  city          String   @default("Daventry")
  county        String   @default("Northamptonshire")
  postcode      String?
  country       String   @default("United Kingdom")
  coordinates   Json?
  isActive      Boolean  @default(true)
  isApproved    Boolean  @default(true)
  rating        Float    @default(0)
  totalOrders   Int      @default(0)
  deliveryFee   Float    @default(2.50)
  minimumOrder  Float    @default(10.00)
  deliveryRadius Float   @default(5.0)
  cuisineType   String   @default("Burgers,Chicken,Wings,Takeaway")
  openingHours  String?  // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation("UserRestaurant", fields: [userId], references: [id], onDelete: Cascade)
  categories    Category[]
  reviews       Review[]
  menuItems     MenuItem[]

  @@map("restaurants")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  role      String   @default("admin") // admin, super_admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("UserAdmin", fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Till {
  id            String   @id @default(cuid())
  userId        String   @unique
  tillNumber    String   @unique
  isActive      Boolean  @default(true)
  lastActivity  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation("UserTill", fields: [userId], references: [id], onDelete: Cascade)
  transactions  Payment[]

  @@map("tills")
}

// Restaurant Menu Models
model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  image        String?
  isActive     Boolean    @default(true)
  sortOrder    Int        @default(0)
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        MenuItem[]

  @@map("categories")
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  isAvailable  Boolean    @default(true)
  isVegetarian Boolean    @default(false)
  isVegan      Boolean    @default(false)
  isGlutenFree Boolean    @default(false)
  isSpicy      Boolean    @default(false)
  allergens    String   @default("") // Comma-separated string
  calories     Int?
  preparationTime Int?    // in minutes
  sortOrder    Int        @default(0)
  categoryId   String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  cartItems    CartItem[] @relation("CartMenuItem")
  orderItems   OrderItem[]
  customizations MenuItemCustomization[]

  @@map("menu_items")
}

model MenuItemCustomization {
  id          String   @id @default(cuid())
  name        String
  price       Float    @default(0)
  isRequired  Boolean  @default(false)
  maxChoices  Int?
  menuItemId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  choices     CustomizationChoice[]

  @@map("menu_item_customizations")
}

model CustomizationChoice {
  id                      String                @id @default(cuid())
  name                    String
  price                   Float                 @default(0)
  isAvailable             Boolean               @default(true)
  customizationId         String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  customization           MenuItemCustomization @relation(fields: [customizationId], references: [id], onDelete: Cascade)

  @@map("customization_choices")
}

// Order and Delivery Models
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  sequenceNumber  Int         @unique
  customerId      String?
  customerName    String
  customerEmail   String
  customerPhone   String
  customerAddress String?
  customerCity    String?
  customerPostcode String?
  specialInstructions String?
  orderType       OrderType   @default(TAKEAWAY)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus @default(PENDING)
  sumupTransactionId String?
  status          OrderStatus @default(PENDING)
  subtotal        Float
  tax             Float       @default(0)
  deliveryFee     Float       @default(0)
  total           Float
  estimatedReadyTime DateTime?
  actualReadyTime DateTime?
  driverId        String?
  cartId          String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  customer        Customer?   @relation(fields: [customerId], references: [id])
  driver          Driver?     @relation("DriverDeliveries", fields: [driverId], references: [id])
  items           OrderItem[]
  payment         Payment?
  cart            Cart?       @relation(fields: [cartId], references: [id])

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  menuItemId   String
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  menuItemName String
  menuItemDescription String?
  specialInstructions String?
  customizations Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem     MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

// Address Model
model Address {
  id          String   @id @default(cuid())
  customerId  String
  label       String   // Home, Work, etc.
  address     String
  city        String
  county      String
  postcode    String
  country     String   @default("United Kingdom")
  coordinates Json?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Payment Models
model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  tillId        String?
  amount        Float
  currency      String        @default("GBP")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  sumupTransactionId String?
  sumupReceiptId String?
  stripePaymentIntentId String?
  stripeRefundId String?
  receiptPrinted Boolean      @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  till          Till?         @relation(fields: [tillId], references: [id])

  @@map("payments")
}

// Review and Rating Models
model Review {
  id           String   @id @default(cuid())
  customerId   String
  restaurantId String
  orderId      String?
  rating       Int      // 1-5 stars
  comment      String?
  isAnonymous  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([customerId, restaurantId, orderId])
  @@map("reviews")
}

// Promotion and Loyalty Models
model Promotion {
  id            String           @id @default(cuid())
  code          String           @unique
  name          String
  description   String?
  discountType  DiscountType
  discountValue Float
  minimumOrder  Float?
  maximumDiscount Float?
  usageLimit    Int?
  usedCount     Int              @default(0)
  isActive      Boolean          @default(true)
  validFrom     DateTime
  validUntil    DateTime
  applicableRestaurants String   @default("") // comma-separated restaurant IDs, empty for all
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("promotions")
}

// Support and Help Models
model SupportTicket {
  id          String           @id @default(cuid())
  customerId  String
  subject     String
  message     String
  status      TicketStatus     @default(OPEN)
  priority    TicketPriority   @default(MEDIUM)
  category    TicketCategory
  assignedTo  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  customer    Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DELIVERY
  COLLECTION
  TAKEAWAY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CARD
  CASH
  DIGITAL_WALLET
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  ORDER_ISSUE
  PAYMENT_PROBLEM
  DELIVERY_ISSUE
  TECHNICAL_SUPPORT
  GENERAL_INQUIRY
  COMPLAINT
  FEEDBACK
}

// Cart Models (for shopping cart before order placement)
model Cart {
  id        String     @id @default(cuid())
  customerId String?
  sessionId String?    // For guest users
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  customer  Customer?  @relation("CustomerCart", fields: [customerId], references: [id], onDelete: Cascade)
  items     CartItem[]
  order     Order?

  @@unique([customerId])
  @@unique([sessionId])
  @@map("carts")
}

model CartItem {
  id           String   @id @default(cuid())
  cartId       String
  menuItemId   String
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  specialInstructions String?
  customizations Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cart         Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  menuItem     MenuItem @relation("CartMenuItem", fields: [menuItemId], references: [id])

  @@unique([cartId, menuItemId])
  @@map("cart_items")
}
